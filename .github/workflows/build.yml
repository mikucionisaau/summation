name: build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        config: [ {os: ubuntu-latest, toolchain: linux-gcc14}, {os: ubuntu-latest, toolchain: linux-clang19}, {os: macos-latest, toolchain: macos}, {os: macos-latest, toolchain: macos-brew-gcc14}, {os: macos-latest, toolchain: macos-brew-clang}, {os: windows-latest, toolchain: windows} ]
      fail-fast: false
    runs-on: ${{ matrix.config.os }}
    env:
      BUILD_DIR: build-release
      CMAKE_BUILD_TYPE: Release
      CTEST_OUTPUT_ON_FAILURE: 1
      CMAKE_TOOLCHAIN_FILE: ${{ github.workspace }}/cmake/toolchain/${{ matrix.config.toolchain }}.cmake
    steps:
    - name: Setup Linux tools
      if: ${{ runner.os == 'linux' }}
      run: |
        sudo apt-get -qq update && sudo apt-get -qq install gcc g++ gcc-14 g++-14 clang-19 cmake ninja-build python3 python3-matplotlib python3-pandas
        CORES=$(nproc)
        echo "CMAKE_BUILD_PARALLEL_LEVEL=$CORES" >> $GITHUB_ENV
        echo "CTEST_PARALLEL_LEVEL=$CORES" >> $GITHUB_ENV
        echo "CTEST_TEST_LOAD=$CORES" >> $GITHUB_ENV
        echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV
    - name: Install MacOS tools
      if: ${{ matrix.os == 'macOS' }}
      run: |
        brew install gcc cmake ninja python3 python-matplotlib python-packaging
        CORES=$(sysctl -n hw.ncpu)
        echo "CMAKE_BUILD_PARALLEL_LEVEL=$CORES" >> $GITHUB_ENV
        echo "CTEST_PARALLEL_LEVEL=$CORES" >> $GITHUB_ENV
        echo "CTEST_TEST_LOAD=$CORES" >> $GITHUB_ENV
        echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV
    - name: Install Windows tools
      if: ${{ runner.os == 'windows' }}
      run: |
        dir "$env:programfiles"
        dir "$env:programfiles/Microsoft Visual Studio"
        dir "$env:programfiles/Microsoft Visual Studio/2022"
        dir "$env:programfiles/Microsoft Visual Studio/2022/Enterprise"
        dir "$env:programfiles/Microsoft Visual Studio/2022/Enterprise/Common7"
        & "$env:programfiles/Microsoft Visual Studio/2022/Enterprise/Common7/Tools/Launch-VsDevShell.ps1"
    - uses: actions/checkout@v4
    - name: Configure
      run: cmake -B "${{ env.BUILD_DIR }}" -DSUM_WITH_TESTS_FAIL=ON
    - name: Compile
      run: cmake --build "${{ env.BUILD_DIR }}" --config "${{ env.CMAKE_BUILD_TYPE }}"
    - name: Test
      run: ctest --test-dir "${{ env.BUILD_DIR }}" -C "${{ env.CMAKE_BUILD_TYPE }}" -R ".*_test" && true
    - name: Benchmark
      run: ctest --test-dir "${{ env.BUILD_DIR }}" -C "${{ env.CMAKE_BUILD_TYPE }}" -R ".*_bm"
    - name: Plot benchmark results
      run: ./tests/plot.py --logx --logy --output "${{ env.BUILD_DIR }}/tests/plot.png" "${{ env.BUILD_DIR }}/tests"/*.json
    - name: Package benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmarks-${{ matrix.os }}-${{ matrix.cc }}
        path: |
          ${{ env.BUILD_DIR }}/tests/plot.png
          ${{ env.BUILD_DIR }}/tests/*.json
